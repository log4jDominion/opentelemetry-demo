name: Docker Compose Build and Push

on:
  push:
    branches:
      - main  # Adjust to the branch you want to trigger the workflow

env:
  IMAGE_NAME: sbhardw7/open-telemetry
  DEV_VERSION: dev
  MAIN_VERSION: main

jobs:
  run_checks:
    uses: ./.github/workflows/checks.yml

  build-and-push:
    needs: run_checks
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Run integration tests
      # - name: run tracetesting
      #   run: |
      #     make build && docker system prune -f && make run-tracetesting

      # Step 2: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Set up Docker Compose
      - name: Set up Docker Compose
        run: |
          sudo mkdir -p ~/.docker/cli-plugins/
          sudo curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          sudo chmod +x ~/.docker/cli-plugins/docker-compose
          sudo docker compose version

      # Step 4: Build the images using Docker Compose
      - name: Docker Compose Build
        run: sudo docker compose build

      # Step 5: Print displayed images
      - name: Docker Compose list
        run: sudo docker images -a

      # Step 6: Push dev images using Docker Push
      - name: Docker Compose Push
        run: | 
          docker push $IMAGE_NAME:$DEV_VERSION-accountingservice
          docker push $IMAGE_NAME:$DEV_VERSION-adservice
          docker push $IMAGE_NAME:$DEV_VERSION-cartservice
          docker push $IMAGE_NAME:$DEV_VERSION-checkoutservice
          docker push $IMAGE_NAME:$DEV_VERSION-currencyservice
          docker push $IMAGE_NAME:$DEV_VERSION-emailservice
          docker push $IMAGE_NAME:$DEV_VERSION-frauddetectionservice
          docker push $IMAGE_NAME:$DEV_VERSION-frontend
          docker push $IMAGE_NAME:$DEV_VERSION-frontendproxy
          docker push $IMAGE_NAME:$DEV_VERSION-imageprovider
          docker push $IMAGE_NAME:$DEV_VERSION-loadgenerator
          docker push $IMAGE_NAME:$DEV_VERSION-paymentservice
          docker push $IMAGE_NAME:$DEV_VERSION-productcatalogservice
          docker push $IMAGE_NAME:$DEV_VERSION-quoteservice
          docker push $IMAGE_NAME:$DEV_VERSION-recommendationservice
          docker push $IMAGE_NAME:$DEV_VERSION-shippingservice

      # Step 7: Push the main images using Docker Push
      - name: Docker Compose Push
        run: | 
          docker image tag $IMAGE_NAME:$DEV_VERSION-accountingservice $IMAGE_NAME:$MAIN_VERSION-accountingservice
          docker push $IMAGE_NAME:$MAIN_VERSION-accountingservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-adservice $IMAGE_NAME:$MAIN_VERSION-adservice
          docker push $IMAGE_NAME:$MAIN_VERSION-adservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-cartservice $IMAGE_NAME:$MAIN_VERSION-cartservice
          docker push $IMAGE_NAME:$MAIN_VERSION-cartservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-checkoutservice $IMAGE_NAME:$MAIN_VERSION-checkoutservice
          docker push $IMAGE_NAME:$MAIN_VERSION-checkoutservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-currencyservice $IMAGE_NAME:$MAIN_VERSION-currencyservice
          docker push $IMAGE_NAME:$MAIN_VERSION-currencyservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-emailservice $IMAGE_NAME:$MAIN_VERSION-emailservice
          docker push $IMAGE_NAME:$MAIN_VERSION-emailservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-frauddetectionservice $IMAGE_NAME:$MAIN_VERSION-frauddetectionservice
          docker push $IMAGE_NAME:$MAIN_VERSION-frauddetectionservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-frontend $IMAGE_NAME:$MAIN_VERSION-frontend
          docker push $IMAGE_NAME:$MAIN_VERSION-frontend
          docker image tag $IMAGE_NAME:$DEV_VERSION-frontendproxy $IMAGE_NAME:$MAIN_VERSION-frontendproxy
          docker push $IMAGE_NAME:$MAIN_VERSION-frontendproxy
          docker image tag $IMAGE_NAME:$DEV_VERSION-imageprovider $IMAGE_NAME:$MAIN_VERSION-imageprovider
          docker push $IMAGE_NAME:$MAIN_VERSION-imageprovider
          docker image tag $IMAGE_NAME:$DEV_VERSION-loadgenerator $IMAGE_NAME:$MAIN_VERSION-loadgenerator
          docker push $IMAGE_NAME:$MAIN_VERSION-loadgenerator
          docker image tag $IMAGE_NAME:$DEV_VERSION-paymentservice $IMAGE_NAME:$MAIN_VERSION-paymentservice
          docker push $IMAGE_NAME:$MAIN_VERSION-paymentservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-productcatalogservice $IMAGE_NAME:$MAIN_VERSION-productcatalogservice
          docker push $IMAGE_NAME:$MAIN_VERSION-productcatalogservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-quoteservice $IMAGE_NAME:$MAIN_VERSION-quoteservice
          docker push $IMAGE_NAME:$MAIN_VERSION-quoteservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-recommendationservice $IMAGE_NAME:$MAIN_VERSION-recommendationservice
          docker push $IMAGE_NAME:$MAIN_VERSION-recommendationservice
          docker image tag $IMAGE_NAME:$DEV_VERSION-shippingservice $IMAGE_NAME:$MAIN_VERSION-shippingservice
          docker push $IMAGE_NAME:$MAIN_VERSION-shippingservice

      - name: Connect to EKS cluster
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2 

      - name: Update kubeconfig for EKS
        run: aws eks update-kubeconfig --name enpm818n-kubernetes-cluster --region us-east-2

      # Step 4: Apply Kubernetes deployment
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-accountingservice_5.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-adservice_6.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-cartservice_7.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-checkoutservice_8.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-currencyservice_9.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-emailservice_10.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-frauddetectionservice_12.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-frontend_13.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-frontendproxy_14.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-imageprovider_15.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-loadgenerator_17.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-paymentservice_18.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-productcatalogservice_19.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-quoteservice_20.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-recommendationservice_21.yaml
          kubectl apply -f ./split_yaml/Deployment/opentelemetry-demo-shippingservice_22.yaml

      